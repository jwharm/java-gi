/*
 * Win32NetworkMonitor is a record type with only two fields: a
 * pointer to the parent instance and a pointer to the private data.
 * This results in constructors that clash with the default java-gi
 * Proxy constructor. Technically this is a bug in java-gi, but it
 * occurs only for the Win32NetworkMonitor type and this type has no
 * functionality in the Java bindings: no fields, no methods,
 * nothing useful. So we remove it from the Java bindings for now.
 */
Win32NetworkMonitor java-gi-skip
Win32NetworkMonitorClass java-gi-skip

/*
 * The method "g_io_module_load" overrides "g_type_module_load", but
 * returns void instead of boolean. This is not allowed in Java.
 * Therefore, the method in IOModule is renamed fom "load" to
 * "load_module".
 */
IOModule.load name=load_module

/*
 * The method "g_tls_certificate_get_dns_names" returns a GPtrArray of
 * GBytes. Java-GI converts GPtrArray and GBytes into Java arrays, but
 * doesn't support nesting them yet.
 */
TlsCertificate.get_dns_names java-gi-skip

/*
 * The method "g_data_input_stream_read_byte" overrides
 * "g_buffered_input_stream_read_byte", but with a different return
 * type. This is not allowed in Java. Therefore, the method in
 * BufferedInputStream is renamed from "read_byte" to "read_int".
 */
BufferedInputStream.read_byte name=read_int

/*
 * The "get_type" method is already generated as a static method by
 * Java-GI. This clashes with the virtual method with the same name.
 * As a workaround, the virtual method is removed from the Java
 * bindings.
 */
SocketControlMessage.get_type java-gi-skip

/*
 * "g_async_initable_new_finish" is a method declaration in the
 * interface "AsyncInitable". It is meant to be implemented as a
 * constructor (in Java-GI it would become a static factory method).
 * However, Java does not allow a (non-static) method to be implemented
 * or overridden by a static method. The current solution is to remove
 * the method from the interface. It is still available in the
 * implementing classes.
 */
AsyncInitable.new_finish java-gi-skip

/*
 * GIO File stream classes declare virtual methods that are also
 * declared in the "Seekable" interface that they implement. This
 * causes issues because the interface methods are public in Java,
 * while a virtual method in a class is generated with protected
 * visibility. This is not allowed in Java. Therefore, we remove the
 * virtual methods from the classes. They are still callable using the
 * (default) method definitions in the "Seekable" interface.
 */
File{Input,Output,IO}Stream
    .tell java-gi-skip
    .seek java-gi-skip
    .can_truncate java-gi-skip
    .can_seek java-gi-skip

// Let GIO stream classes implement AutoCloseable in Java.
IOStream java-gi-auto-closeable
InputStream java-gi-auto-closeable
OutputStream java-gi-auto-closeable

/*
 * Make GListModel and GListStore generic (replacing all GObject
 * arguments with generic type {@code <T extends GObject>}).
 */
ListModel java-gi-generic java-gi-list-interface

// ListStore implements ListModel<T> and supports splice
ListStore java-gi-generic java-gi-list-mutable

/*
 * Because GListStore implements GListModel, which is patched to
 * implement java.util.List, its `void remove(int)` method conflicts
 * with List's `boolean remove(int)`. Rename to `removeAt()`.
 */
ListStore.remove name=remove_at

/*
 * File.prefixMatches() is defined as a virtual method with invoker
 * method hasPrefix(), but the parameters are swapped. Remove the
 * invoker attribute, so they will be treated as separate methods.
 */
File.prefix_matches invoker=()

/*
 * Icon.toString() and SocketConnectable.toString() are default
 * methods. Default methods are not allowed to override
 * java.lang.Object methods, so we rename them.
 */
Icon.to_string name=serialize_to_string
SocketConnectable.to_string name=format_as_string
